
STM32F103x6-Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001044  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001174  08001174  00011174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800118c  0800118c  00011194  2**0
                  CONTENTS
  4 .ARM          00000000  0800118c  0800118c  00011194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800118c  08001194  00011194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800118c  0800118c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001190  08001190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08001194  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001194  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f37  00000000  00000000  000111bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a17  00000000  00000000  000130f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000e20  00000000  00000000  00013b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  00014930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001f0  00000000  00000000  00014ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000499  00000000  00000000  00014d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000182a  00000000  00000000  00015231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006e93  00000000  00000000  00016a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001d8ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000077c  00000000  00000000  0001d944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800115c 	.word	0x0800115c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800115c 	.word	0x0800115c

08000170 <SPI_Send_Data_Through_Terminal_Between_2_MCUs>:
static void USART1_CallBack(void);
static void SPI1_CallBack(struct S_IRQ_SRC IRQ_src);

/* =========== Main Program ========== */
void SPI_Send_Data_Through_Terminal_Between_2_MCUs(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08c      	sub	sp, #48	; 0x30
 8000174:	af00      	add	r7, sp, #0
	/* Initialization */
	Clock_Init();
 8000176:	f000 f83f 	bl	80001f8 <Clock_Init>

	/* Configuration of USART1 */
	USART_Config_t USART1_Config;

	USART1_Config.BaudRate = UART_BaudRate_115200;
 800017a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800017e:	61fb      	str	r3, [r7, #28]
	USART1_Config.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000180:	2300      	movs	r3, #0
 8000182:	84fb      	strh	r3, [r7, #38]	; 0x26
	USART1_Config.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000184:	2320      	movs	r3, #32
 8000186:	853b      	strh	r3, [r7, #40]	; 0x28
	USART1_Config.P_IRQ_CallBack = USART1_CallBack;
 8000188:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <SPI_Send_Data_Through_Terminal_Between_2_MCUs+0x78>)
 800018a:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART1_Config.Parity = UART_Parity_NONE;
 800018c:	2300      	movs	r3, #0
 800018e:	847b      	strh	r3, [r7, #34]	; 0x22
	USART1_Config.Payload_Length = UART_Payload_Length_8B;
 8000190:	2300      	movs	r3, #0
 8000192:	843b      	strh	r3, [r7, #32]
	USART1_Config.StopBits = UART_StopBits_1;
 8000194:	2300      	movs	r3, #0
 8000196:	84bb      	strh	r3, [r7, #36]	; 0x24
	USART1_Config.USART_Mode = UART_Mode_TX_RX;
 8000198:	230c      	movs	r3, #12
 800019a:	833b      	strh	r3, [r7, #24]

	MCAL_UART_Init(USART1, &USART1_Config);
 800019c:	f107 0318 	add.w	r3, r7, #24
 80001a0:	4619      	mov	r1, r3
 80001a2:	4812      	ldr	r0, [pc, #72]	; (80001ec <SPI_Send_Data_Through_Terminal_Between_2_MCUs+0x7c>)
 80001a4:	f000 fd34 	bl	8000c10 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001a8:	4810      	ldr	r0, [pc, #64]	; (80001ec <SPI_Send_Data_Through_Terminal_Between_2_MCUs+0x7c>)
 80001aa:	f000 fe6b 	bl	8000e84 <MCAL_UART_GPIO_Set_Pins>

	/* Configuration of SPI1 */
	SPI_Config_t SPI1_Config;

	/* Common Configuration */
	SPI1_Config.BaudRate_Prescaler = BAUDERATE_PRESCALER_8;
 80001ae:	2310      	movs	r3, #16
 80001b0:	81fb      	strh	r3, [r7, #14]
	SPI1_Config.CLK_Phase = CLK_PHASE_SECOND;
 80001b2:	2301      	movs	r3, #1
 80001b4:	817b      	strh	r3, [r7, #10]
	SPI1_Config.CLK_Polarity = CLK_POLARITY_IDLE_HIGH;
 80001b6:	2302      	movs	r3, #2
 80001b8:	813b      	strh	r3, [r7, #8]
	SPI1_Config.Frame_Format = FRAME_FORMAT_MSB_FIRST;
 80001ba:	2300      	movs	r3, #0
 80001bc:	80bb      	strh	r3, [r7, #4]
	SPI1_Config.Frame_Size = FRAME_SIZE_8BIT;
 80001be:	2300      	movs	r3, #0
 80001c0:	80fb      	strh	r3, [r7, #6]
	SPI1_Config.Communication_Mode = COMMUNICATION_MODE_2LINE_FULL_DUPLEX;
 80001c2:	2300      	movs	r3, #0
 80001c4:	807b      	strh	r3, [r7, #2]
	/* Force the slave select (High) idle mode */
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif

#ifdef MCU_Act_As_Slave
	SPI1_Config.SPI_Mode = SPI_MODE_SLAVE;
 80001c6:	2300      	movs	r3, #0
 80001c8:	803b      	strh	r3, [r7, #0]
	SPI1_Config.IRQ_Enable = IRQ_ENABLE_RXNEIE;
 80001ca:	2340      	movs	r3, #64	; 0x40
 80001cc:	823b      	strh	r3, [r7, #16]
	SPI1_Config.NSS = NSS_HW_SLAVE;
 80001ce:	2300      	movs	r3, #0
 80001d0:	81bb      	strh	r3, [r7, #12]
	SPI1_Config.P_IRQ_CallBack = SPI1_CallBack;
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <SPI_Send_Data_Through_Terminal_Between_2_MCUs+0x80>)
 80001d4:	617b      	str	r3, [r7, #20]
#endif
	MCAL_SPI_Init(SPI1, &SPI1_Config);
 80001d6:	463b      	mov	r3, r7
 80001d8:	4619      	mov	r1, r3
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <SPI_Send_Data_Through_Terminal_Between_2_MCUs+0x84>)
 80001dc:	f000 faf0 	bl	80007c0 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <SPI_Send_Data_Through_Terminal_Between_2_MCUs+0x84>)
 80001e2:	f000 fb87 	bl	80008f4 <MCAL_SPI_GPIO_Set_Pins>

	/* Loop For Ever */
	while(1){}
 80001e6:	e7fe      	b.n	80001e6 <SPI_Send_Data_Through_Terminal_Between_2_MCUs+0x76>
 80001e8:	0800022d 	.word	0x0800022d
 80001ec:	40013800 	.word	0x40013800
 80001f0:	08000239 	.word	0x08000239
 80001f4:	40013000 	.word	0x40013000

080001f8 <Clock_Init>:
}

/* ======== clock Initialize definition ======= */
static void Clock_Init(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	/* Enable clock GPIOA */
	RCC_GPIOA_CLK_EN();
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <Clock_Init+0x30>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <Clock_Init+0x30>)
 8000202:	f043 0304 	orr.w	r3, r3, #4
 8000206:	6193      	str	r3, [r2, #24]

	/* Enable clock GPIOB */
	RCC_GPIOB_CLK_EN();
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <Clock_Init+0x30>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a06      	ldr	r2, [pc, #24]	; (8000228 <Clock_Init+0x30>)
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	6193      	str	r3, [r2, #24]

	/* Enable Clock For AFIO */
	RCC_AFIO_CLK_EN();
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <Clock_Init+0x30>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <Clock_Init+0x30>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6193      	str	r3, [r2, #24]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	40021000 	.word	0x40021000

0800022c <USART1_CallBack>:



static void USART1_CallBack(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	MCAL_SPI_TX_RX(SPI1, &data, SPI_enable);

	/* Slave Selection (High) idle mode */
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <SPI1_CallBack>:

static void SPI1_CallBack(struct S_IRQ_SRC IRQ_src)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	/* If RX Buffer Not Empty Interrupt */
	if(IRQ_src.RXNE)
 8000240:	793b      	ldrb	r3, [r7, #4]
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	b2db      	uxtb	r3, r3
 8000248:	2b00      	cmp	r3, #0
 800024a:	d009      	beq.n	8000260 <SPI1_CallBack+0x28>
	{
		/* Receive data */
		MCAL_SPI_Recieve_Data(SPI1, &data, SPI_enable);
 800024c:	2201      	movs	r2, #1
 800024e:	4906      	ldr	r1, [pc, #24]	; (8000268 <SPI1_CallBack+0x30>)
 8000250:	4806      	ldr	r0, [pc, #24]	; (800026c <SPI1_CallBack+0x34>)
 8000252:	f000 fc65 	bl	8000b20 <MCAL_SPI_Recieve_Data>

		/* Send the Received data to the terminal to see it */
		MCAL_UART_SendData(USART1, &data, USART_enable);
 8000256:	2201      	movs	r2, #1
 8000258:	4903      	ldr	r1, [pc, #12]	; (8000268 <SPI1_CallBack+0x30>)
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <SPI1_CallBack+0x38>)
 800025c:	f000 fda0 	bl	8000da0 <MCAL_UART_SendData>
	}
#endif
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000030 	.word	0x20000030
 800026c:	40013000 	.word	0x40013000
 8000270:	40013800 	.word	0x40013800

08000274 <EXTI0_IRQHandler>:
/* =============== ISR Functions ================== */
/* ================================================ */

// EXTI0
void EXTI0_IRQHandler (void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <EXTI0_IRQHandler+0x1c>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a04      	ldr	r2, [pc, #16]	; (8000290 <EXTI0_IRQHandler+0x1c>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <EXTI0_IRQHandler+0x20>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4798      	blx	r3

}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40010400 	.word	0x40010400
 8000294:	20000034 	.word	0x20000034

08000298 <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <EXTI1_IRQHandler+0x1c>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <EXTI1_IRQHandler+0x1c>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <EXTI1_IRQHandler+0x20>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4798      	blx	r3

}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40010400 	.word	0x40010400
 80002b8:	20000034 	.word	0x20000034

080002bc <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI2_IRQHandler+0x1c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI2_IRQHandler+0x1c>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI2_IRQHandler+0x20>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4798      	blx	r3

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	20000034 	.word	0x20000034

080002e0 <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <EXTI3_IRQHandler+0x1c>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <EXTI3_IRQHandler+0x1c>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <EXTI3_IRQHandler+0x20>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4798      	blx	r3

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010400 	.word	0x40010400
 8000300:	20000034 	.word	0x20000034

08000304 <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <EXTI4_IRQHandler+0x1c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <EXTI4_IRQHandler+0x1c>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <EXTI4_IRQHandler+0x20>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	4798      	blx	r3

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010400 	.word	0x40010400
 8000324:	20000034 	.word	0x20000034

08000328 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 800032c:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d008      	beq.n	800034a <EXTI9_5_IRQHandler+0x22>
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6153      	str	r3, [r2, #20]
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000352:	2b00      	cmp	r3, #0
 8000354:	d008      	beq.n	8000368 <EXTI9_5_IRQHandler+0x40>
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a1b      	ldr	r2, [pc, #108]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800035c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000370:	2b00      	cmp	r3, #0
 8000372:	d008      	beq.n	8000386 <EXTI9_5_IRQHandler+0x5e>
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037e:	6153      	str	r3, [r2, #20]
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 8000382:	69db      	ldr	r3, [r3, #28]
 8000384:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800038e:	2b00      	cmp	r3, #0
 8000390:	d008      	beq.n	80003a4 <EXTI9_5_IRQHandler+0x7c>
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 80003a0:	6a1b      	ldr	r3, [r3, #32]
 80003a2:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d008      	beq.n	80003c2 <EXTI9_5_IRQHandler+0x9a>
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 80003b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ba:	6153      	str	r3, [r2, #20]
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 80003be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c0:	4798      	blx	r3
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010400 	.word	0x40010400
 80003cc:	20000034 	.word	0x20000034

080003d0 <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <EXTI15_10_IRQHandler+0x22>
 80003e0:	4b2a      	ldr	r3, [pc, #168]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a29      	ldr	r2, [pc, #164]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 80003e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ea:	6153      	str	r3, [r2, #20]
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 80003ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f0:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 80003f2:	4b26      	ldr	r3, [pc, #152]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d008      	beq.n	8000410 <EXTI15_10_IRQHandler+0x40>
 80003fe:	4b23      	ldr	r3, [pc, #140]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a22      	ldr	r2, [pc, #136]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b21      	ldr	r3, [pc, #132]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 800040c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040e:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000418:	2b00      	cmp	r3, #0
 800041a:	d008      	beq.n	800042e <EXTI15_10_IRQHandler+0x5e>
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	4a1a      	ldr	r2, [pc, #104]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000426:	6153      	str	r3, [r2, #20]
 8000428:	4b19      	ldr	r3, [pc, #100]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000436:	2b00      	cmp	r3, #0
 8000438:	d008      	beq.n	800044c <EXTI15_10_IRQHandler+0x7c>
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 8000448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800044a:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000454:	2b00      	cmp	r3, #0
 8000456:	d008      	beq.n	800046a <EXTI15_10_IRQHandler+0x9a>
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a0b      	ldr	r2, [pc, #44]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	6153      	str	r3, [r2, #20]
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 8000466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000468:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d008      	beq.n	8000488 <EXTI15_10_IRQHandler+0xb8>
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a04      	ldr	r2, [pc, #16]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800047c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b03      	ldr	r3, [pc, #12]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 8000484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000486:	4798      	blx	r3
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010400 	.word	0x40010400
 8000490:	20000034 	.word	0x20000034

08000494 <Get_CRLH_Position>:
 */

#include <stm32f103x6_GPIO_driver.h>

static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800049e:	88fb      	ldrh	r3, [r7, #6]
 80004a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004a4:	f000 80a5 	beq.w	80005f2 <Get_CRLH_Position+0x15e>
 80004a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004ac:	f300 80a3 	bgt.w	80005f6 <Get_CRLH_Position+0x162>
 80004b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004b4:	f000 809b 	beq.w	80005ee <Get_CRLH_Position+0x15a>
 80004b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004bc:	f300 809b 	bgt.w	80005f6 <Get_CRLH_Position+0x162>
 80004c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004c4:	f000 8091 	beq.w	80005ea <Get_CRLH_Position+0x156>
 80004c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004cc:	f300 8093 	bgt.w	80005f6 <Get_CRLH_Position+0x162>
 80004d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004d4:	f000 8087 	beq.w	80005e6 <Get_CRLH_Position+0x152>
 80004d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004dc:	f300 808b 	bgt.w	80005f6 <Get_CRLH_Position+0x162>
 80004e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004e4:	d07d      	beq.n	80005e2 <Get_CRLH_Position+0x14e>
 80004e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004ea:	f300 8084 	bgt.w	80005f6 <Get_CRLH_Position+0x162>
 80004ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004f2:	d074      	beq.n	80005de <Get_CRLH_Position+0x14a>
 80004f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004f8:	dc7d      	bgt.n	80005f6 <Get_CRLH_Position+0x162>
 80004fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004fe:	d06c      	beq.n	80005da <Get_CRLH_Position+0x146>
 8000500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000504:	dc77      	bgt.n	80005f6 <Get_CRLH_Position+0x162>
 8000506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800050a:	d064      	beq.n	80005d6 <Get_CRLH_Position+0x142>
 800050c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000510:	dc71      	bgt.n	80005f6 <Get_CRLH_Position+0x162>
 8000512:	2b80      	cmp	r3, #128	; 0x80
 8000514:	d05d      	beq.n	80005d2 <Get_CRLH_Position+0x13e>
 8000516:	2b80      	cmp	r3, #128	; 0x80
 8000518:	dc6d      	bgt.n	80005f6 <Get_CRLH_Position+0x162>
 800051a:	2b20      	cmp	r3, #32
 800051c:	dc48      	bgt.n	80005b0 <Get_CRLH_Position+0x11c>
 800051e:	2b00      	cmp	r3, #0
 8000520:	dd69      	ble.n	80005f6 <Get_CRLH_Position+0x162>
 8000522:	3b01      	subs	r3, #1
 8000524:	2b1f      	cmp	r3, #31
 8000526:	d866      	bhi.n	80005f6 <Get_CRLH_Position+0x162>
 8000528:	a201      	add	r2, pc, #4	; (adr r2, 8000530 <Get_CRLH_Position+0x9c>)
 800052a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052e:	bf00      	nop
 8000530:	080005b7 	.word	0x080005b7
 8000534:	080005bb 	.word	0x080005bb
 8000538:	080005f7 	.word	0x080005f7
 800053c:	080005bf 	.word	0x080005bf
 8000540:	080005f7 	.word	0x080005f7
 8000544:	080005f7 	.word	0x080005f7
 8000548:	080005f7 	.word	0x080005f7
 800054c:	080005c3 	.word	0x080005c3
 8000550:	080005f7 	.word	0x080005f7
 8000554:	080005f7 	.word	0x080005f7
 8000558:	080005f7 	.word	0x080005f7
 800055c:	080005f7 	.word	0x080005f7
 8000560:	080005f7 	.word	0x080005f7
 8000564:	080005f7 	.word	0x080005f7
 8000568:	080005f7 	.word	0x080005f7
 800056c:	080005c7 	.word	0x080005c7
 8000570:	080005f7 	.word	0x080005f7
 8000574:	080005f7 	.word	0x080005f7
 8000578:	080005f7 	.word	0x080005f7
 800057c:	080005f7 	.word	0x080005f7
 8000580:	080005f7 	.word	0x080005f7
 8000584:	080005f7 	.word	0x080005f7
 8000588:	080005f7 	.word	0x080005f7
 800058c:	080005f7 	.word	0x080005f7
 8000590:	080005f7 	.word	0x080005f7
 8000594:	080005f7 	.word	0x080005f7
 8000598:	080005f7 	.word	0x080005f7
 800059c:	080005f7 	.word	0x080005f7
 80005a0:	080005f7 	.word	0x080005f7
 80005a4:	080005f7 	.word	0x080005f7
 80005a8:	080005f7 	.word	0x080005f7
 80005ac:	080005cb 	.word	0x080005cb
 80005b0:	2b40      	cmp	r3, #64	; 0x40
 80005b2:	d00c      	beq.n	80005ce <Get_CRLH_Position+0x13a>
	case GPIO_PIN_15:
		return 28;
		break;

	default:
		break;
 80005b4:	e01f      	b.n	80005f6 <Get_CRLH_Position+0x162>
		return 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e01f      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	e01d      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 8;
 80005be:	2308      	movs	r3, #8
 80005c0:	e01b      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 12;
 80005c2:	230c      	movs	r3, #12
 80005c4:	e019      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 16;
 80005c6:	2310      	movs	r3, #16
 80005c8:	e017      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 20;
 80005ca:	2314      	movs	r3, #20
 80005cc:	e015      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 24;
 80005ce:	2318      	movs	r3, #24
 80005d0:	e013      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 28;
 80005d2:	231c      	movs	r3, #28
 80005d4:	e011      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e00f      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	e00d      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 8;
 80005de:	2308      	movs	r3, #8
 80005e0:	e00b      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 12;
 80005e2:	230c      	movs	r3, #12
 80005e4:	e009      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 16;
 80005e6:	2310      	movs	r3, #16
 80005e8:	e007      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 20;
 80005ea:	2314      	movs	r3, #20
 80005ec:	e005      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 24;
 80005ee:	2318      	movs	r3, #24
 80005f0:	e003      	b.n	80005fa <Get_CRLH_Position+0x166>
		return 28;
 80005f2:	231c      	movs	r3, #28
 80005f4:	e001      	b.n	80005fa <Get_CRLH_Position+0x166>
		break;
 80005f6:	bf00      	nop
	}
	return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <MCAL_GPIO_Init>:
 * @retval 			- None
 * Note				- Stm32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 					  But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINs from the Module
 */
void MCAL_GPIO_Init (GPIO_Typedef_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL)  0 >>> 7
	//Port configuration register high (GPIOx_CRH) 8 >>> 15
	vuint32_t *config_reg = NULL; // To store which register for the input pin number
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_CONFIG = 0 ; // To store the pin configuration
 8000612:	2300      	movs	r3, #0
 8000614:	73fb      	strb	r3, [r7, #15]

	// Check if the input GPIO is bigger than bit number 8 to return the correct register for it
	config_reg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH; // Return the register (Low or High)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	2bff      	cmp	r3, #255	; 0xff
 800061c:	d801      	bhi.n	8000622 <MCAL_GPIO_Init+0x1e>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	e001      	b.n	8000626 <MCAL_GPIO_Init+0x22>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3304      	adds	r3, #4
 8000626:	60bb      	str	r3, [r7, #8]

	// Clear CNF8[1:0] MODE8[1:0]
	(*config_reg) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff31 	bl	8000494 <Get_CRLH_Position>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	230f      	movs	r3, #15
 8000638:	4093      	lsls	r3, r2
 800063a:	43da      	mvns	r2, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	401a      	ands	r2, r3
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	601a      	str	r2, [r3, #0]

	// If pin is output
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP))
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	2b07      	cmp	r3, #7
 800064c:	d00b      	beq.n	8000666 <MCAL_GPIO_Init+0x62>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	789b      	ldrb	r3, [r3, #2]
 8000652:	2b06      	cmp	r3, #6
 8000654:	d007      	beq.n	8000666 <MCAL_GPIO_Init+0x62>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	2b05      	cmp	r3, #5
 800065c:	d003      	beq.n	8000666 <MCAL_GPIO_Init+0x62>
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	2b04      	cmp	r3, #4
 8000664:	d10e      	bne.n	8000684 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF8[1:0] MODE8[1:0]
		PIN_CONFIG = ((((PinConfig->GPIO_Mode - 4) << 2)|(PinConfig->GPIO_Speed)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	3b04      	subs	r3, #4
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	b25a      	sxtb	r2, r3
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	78db      	ldrb	r3, [r3, #3]
 8000674:	b25b      	sxtb	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b25b      	sxtb	r3, r3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f003 030f 	and.w	r3, r3, #15
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	e02c      	b.n	80006de <MCAL_GPIO_Init+0xda>

	}
	// If pin is input
	else //00: Input mode (reset state)
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_ANALOG)||(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	789b      	ldrb	r3, [r3, #2]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <MCAL_GPIO_Init+0x90>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d107      	bne.n	80006a4 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF8[1:0] MODE8[1:0] 00
			PIN_CONFIG = ((((PinConfig->GPIO_Mode) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	b2db      	uxtb	r3, r3
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	e01c      	b.n	80006de <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF) // Considered that GPIO_MODE_AF_INPUT = GPIO_MODE_INPUT_FLO in data sheet
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d102      	bne.n	80006b2 <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ((((GPIO_MODE_INPUT_FLO) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 80006ac:	2304      	movs	r3, #4
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e015      	b.n	80006de <MCAL_GPIO_Init+0xda>
		}
		else // Pull-up / Pull-Down Input
		{
			// GPIO_MODE_INPUT_PU == 0b10 as Table 20. Port bit configuration table
			PIN_CONFIG = ((((GPIO_MODE_INPUT_PU) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 80006b2:	2308      	movs	r3, #8
 80006b4:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d107      	bne.n	80006ce <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1 Input pull-up: Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	8812      	ldrh	r2, [r2, #0]
 80006c6:	431a      	orrs	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	e007      	b.n	80006de <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0 Input pull-down: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	8812      	ldrh	r2, [r2, #0]
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRL or CRH
	(*config_reg) |= (PIN_CONFIG << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006de:	7bfc      	ldrb	r4, [r7, #15]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fed5 	bl	8000494 <Get_CRLH_Position>
 80006ea:	4603      	mov	r3, r0
 80006ec:	fa04 f203 	lsl.w	r2, r4, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	431a      	orrs	r2, r3
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	601a      	str	r2, [r3, #0]
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
	...

08000704 <MCAL_RCC_GetSYS_CLKFreq>:
//1111: SYSCLK divided by 512
const uint8_t AHBPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9}; // Shift 1 right == multiply by 2


uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch((RCC->CFGR >> 2)& 0b11)
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	089b      	lsrs	r3, r3, #2
 800070e:	f003 0303 	and.w	r3, r3, #3
 8000712:	2b02      	cmp	r3, #2
 8000714:	d00a      	beq.n	800072c <MCAL_RCC_GetSYS_CLKFreq+0x28>
 8000716:	2b02      	cmp	r3, #2
 8000718:	d80a      	bhi.n	8000730 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 800071e:	2b01      	cmp	r3, #1
 8000720:	d002      	beq.n	8000728 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000722:	e005      	b.n	8000730 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
	{
		case 0:
			return HSI_RC_CLK;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000726:	e004      	b.n	8000732 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
			break;

		case 1:
			// TODO need to calculate it // HSE user should specify it
			return HSE_CLK;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 800072a:	e002      	b.n	8000732 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
			break;

		case 2:
			// TODO need to calculate it // PLLCLK and PLLMULL and PLL Source MUX
			return 16000000;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 800072e:	e000      	b.n	8000732 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
			break;
	}
	return HSI_RC_CLK;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	007a1200 	.word	0x007a1200
 8000744:	00f42400 	.word	0x00f42400

08000748 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF]); // The first shift is multiplication
 800074c:	f7ff ffda 	bl	8000704 <MCAL_RCC_GetSYS_CLKFreq>
 8000750:	4602      	mov	r2, r0
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	091b      	lsrs	r3, r3, #4
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	4903      	ldr	r1, [pc, #12]	; (800076c <MCAL_RCC_GetHCLKFreq+0x24>)
 800075e:	5ccb      	ldrb	r3, [r1, r3]
 8000760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000764:	4618      	mov	r0, r3
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	0800117c 	.word	0x0800117c

08000770 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed pre-scaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]); // The first shift is multiplication
 8000774:	f7ff ffe8 	bl	8000748 <MCAL_RCC_GetHCLKFreq>
 8000778:	4602      	mov	r2, r0
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	4903      	ldr	r1, [pc, #12]	; (8000794 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000786:	5ccb      	ldrb	r3, [r1, r3]
 8000788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800078c:	4618      	mov	r0, r3
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	08001174 	.word	0x08001174

08000798 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed pre-scaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]); // The first shift is multiplication
 800079c:	f7ff ffd4 	bl	8000748 <MCAL_RCC_GetHCLKFreq>
 80007a0:	4602      	mov	r2, r0
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	0adb      	lsrs	r3, r3, #11
 80007a8:	f003 0307 	and.w	r3, r3, #7
 80007ac:	4903      	ldr	r1, [pc, #12]	; (80007bc <MCAL_RCC_GetPCLK2Freq+0x24>)
 80007ae:	5ccb      	ldrb	r3, [r1, r3]
 80007b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	08001174 	.word	0x08001174

080007c0 <MCAL_SPI_Init>:
 * @retval 			- None
 * Note 			- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 * 					- You have to configure RCC to select clock for the selected SPI Module
 */
void MCAL_SPI_Init(SPI_Typedef_t *SPIx, SPI_Config_t *Config)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	/* Safety for register, Using this technique for protect the peripheral form working before the full configurations */
	uint16_t tempReg_CR1 = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	81fb      	strh	r3, [r7, #14]
	uint16_t tempReg_CR2 = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <MCAL_SPI_Init+0x120>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d109      	bne.n	80007ee <MCAL_SPI_Init+0x2e>
	{
		/* If SPI1 Put all configurations in the global config */
		G_SPI_Config[SPI1_INDEX] = Config;
 80007da:	4a42      	ldr	r2, [pc, #264]	; (80008e4 <MCAL_SPI_Init+0x124>)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	6013      	str	r3, [r2, #0]

		/* 1. Open the SPI1 RCC Clock */
		RCC_SPI1_CLK_EN();
 80007e0:	4b41      	ldr	r3, [pc, #260]	; (80008e8 <MCAL_SPI_Init+0x128>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a40      	ldr	r2, [pc, #256]	; (80008e8 <MCAL_SPI_Init+0x128>)
 80007e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	e00c      	b.n	8000808 <MCAL_SPI_Init+0x48>
	}
	else if(SPIx == SPI2)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a3e      	ldr	r2, [pc, #248]	; (80008ec <MCAL_SPI_Init+0x12c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d108      	bne.n	8000808 <MCAL_SPI_Init+0x48>
	{
		/* If SPI2 Put all configurations in the global config */
		G_SPI_Config[SPI2_INDEX] = Config;
 80007f6:	4a3b      	ldr	r2, [pc, #236]	; (80008e4 <MCAL_SPI_Init+0x124>)
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	6053      	str	r3, [r2, #4]

		/* 1. Open the SPI1 RCC Clock */
		RCC_SPI2_CLK_EN();
 80007fc:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <MCAL_SPI_Init+0x128>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <MCAL_SPI_Init+0x128>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000806:	61d3      	str	r3, [r2, #28]
	}

	/* 2. Enable the SPI */
	tempReg_CR1 |= (uint16_t)(1<<6); 	/* Bit 6 SPE: SPI enable */
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080e:	81fb      	strh	r3, [r7, #14]

	/* 3. Set Master or Slave */
	tempReg_CR1 |= Config->SPI_Mode;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	881a      	ldrh	r2, [r3, #0]
 8000814:	89fb      	ldrh	r3, [r7, #14]
 8000816:	4313      	orrs	r3, r2
 8000818:	81fb      	strh	r3, [r7, #14]

	/* 4. Set Communication Mode */
	tempReg_CR1 |= Config->Communication_Mode;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	885a      	ldrh	r2, [r3, #2]
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	4313      	orrs	r3, r2
 8000822:	81fb      	strh	r3, [r7, #14]

	/* 5. Set Frame format */
	tempReg_CR1 |= Config->Frame_Format;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	889a      	ldrh	r2, [r3, #4]
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	4313      	orrs	r3, r2
 800082c:	81fb      	strh	r3, [r7, #14]

	/* 6. Set Data size */
	tempReg_CR1 |= Config->Frame_Size;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	88da      	ldrh	r2, [r3, #6]
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	4313      	orrs	r3, r2
 8000836:	81fb      	strh	r3, [r7, #14]

	/* 7. Set Clock Polarity */
	tempReg_CR1 |= Config->CLK_Polarity;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	891a      	ldrh	r2, [r3, #8]
 800083c:	89fb      	ldrh	r3, [r7, #14]
 800083e:	4313      	orrs	r3, r2
 8000840:	81fb      	strh	r3, [r7, #14]

	/* 8. Set Clock Phase */
	tempReg_CR1 |= Config->CLK_Phase;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	895a      	ldrh	r2, [r3, #10]
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	4313      	orrs	r3, r2
 800084a:	81fb      	strh	r3, [r7, #14]

	/* 9. Set Slave Select Management */
	if(Config->NSS == NSS_HW_MASTER_SS_OUTPUT_ENABLED)
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	899b      	ldrh	r3, [r3, #12]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d105      	bne.n	8000860 <MCAL_SPI_Init+0xa0>
	{
		tempReg_CR2 |= Config->NSS;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	899a      	ldrh	r2, [r3, #12]
 8000858:	89bb      	ldrh	r3, [r7, #12]
 800085a:	4313      	orrs	r3, r2
 800085c:	81bb      	strh	r3, [r7, #12]
 800085e:	e010      	b.n	8000882 <MCAL_SPI_Init+0xc2>
	}
	else if(Config->NSS == NSS_HW_MASTER_SS_OUTPUT_DISABLED)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	899b      	ldrh	r3, [r3, #12]
 8000864:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000868:	4293      	cmp	r3, r2
 800086a:	d105      	bne.n	8000878 <MCAL_SPI_Init+0xb8>
	{
		tempReg_CR2 &= Config->NSS;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	899a      	ldrh	r2, [r3, #12]
 8000870:	89bb      	ldrh	r3, [r7, #12]
 8000872:	4013      	ands	r3, r2
 8000874:	81bb      	strh	r3, [r7, #12]
 8000876:	e004      	b.n	8000882 <MCAL_SPI_Init+0xc2>
	}
	else
	{
		tempReg_CR1 |= Config->NSS;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	899a      	ldrh	r2, [r3, #12]
 800087c:	89fb      	ldrh	r3, [r7, #14]
 800087e:	4313      	orrs	r3, r2
 8000880:	81fb      	strh	r3, [r7, #14]
	}

	/* 10. Set BoudRate Pre-scaler */
	tempReg_CR1 |= Config->BaudRate_Prescaler;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	89da      	ldrh	r2, [r3, #14]
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	4313      	orrs	r3, r2
 800088a:	81fb      	strh	r3, [r7, #14]

	/* 11. Set Interrupt Type */
	if(Config->IRQ_Enable != IRQ_ENABLE_NONE)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	8a1b      	ldrh	r3, [r3, #16]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d019      	beq.n	80008c8 <MCAL_SPI_Init+0x108>
	{
		tempReg_CR2 |= Config->IRQ_Enable;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	8a1a      	ldrh	r2, [r3, #16]
 8000898:	89bb      	ldrh	r3, [r7, #12]
 800089a:	4313      	orrs	r3, r2
 800089c:	81bb      	strh	r3, [r7, #12]

		/* 12. Open the global Interrupt for each peripheral */
		if (SPIx == SPI1)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MCAL_SPI_Init+0x120>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <MCAL_SPI_Init+0xf4>
		{
			NVIC_IRQ35_SPI1_EN();
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MCAL_SPI_Init+0x130>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MCAL_SPI_Init+0x130>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e009      	b.n	80008c8 <MCAL_SPI_Init+0x108>
		}
		else if(SPIx == SPI2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <MCAL_SPI_Init+0x12c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d105      	bne.n	80008c8 <MCAL_SPI_Init+0x108>
		{
			NVIC_IRQ36_SPI2_EN();
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MCAL_SPI_Init+0x130>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <MCAL_SPI_Init+0x130>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6013      	str	r3, [r2, #0]
		}
	}

	/*13. Config your register using the temp register used to protect the configurations */
	SPIx->CR1 = tempReg_CR1;
 80008c8:	89fa      	ldrh	r2, [r7, #14]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempReg_CR2;
 80008ce:	89ba      	ldrh	r2, [r7, #12]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	605a      	str	r2, [r3, #4]

}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40013000 	.word	0x40013000
 80008e4:	2000001c 	.word	0x2000001c
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40003800 	.word	0x40003800
 80008f0:	e000e104 	.word	0xe000e104

080008f4 <MCAL_SPI_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_Typedef_t *SPIx)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t SPI_GPIO_Config;

	/* Depending the recommendation in data sheet -> Table 25. SPI 	*/
	/*  "SPI pin-out"    "Configuration"     "GPIO configuration" 	*/
	if (SPIx == SPI1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a83      	ldr	r2, [pc, #524]	; (8000b0c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d178      	bne.n	80009f6 <MCAL_SPI_GPIO_Set_Pins+0x102>
	{
		if(G_SPI_Config[SPI1_INDEX]->SPI_Mode == SPI_MODE_MASTER) /* Master */
 8000904:	4b82      	ldr	r3, [pc, #520]	; (8000b10 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2b04      	cmp	r3, #4
 800090c:	d143      	bne.n	8000996 <MCAL_SPI_GPIO_Set_Pins+0xa2>
		{
			/* PA4 : SPI1_NSS */
			switch (G_SPI_Config[SPI1_INDEX]->NSS)
 800090e:	4b80      	ldr	r3, [pc, #512]	; (8000b10 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	899b      	ldrh	r3, [r3, #12]
 8000914:	2b04      	cmp	r3, #4
 8000916:	d00e      	beq.n	8000936 <MCAL_SPI_GPIO_Set_Pins+0x42>
 8000918:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800091c:	4293      	cmp	r3, r2
 800091e:	d117      	bne.n	8000950 <MCAL_SPI_GPIO_Set_Pins+0x5c>
			{
			 	 /* Input */
				case NSS_HW_MASTER_SS_OUTPUT_DISABLED:
					/* Hardware Master/Slave Input Floating */
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 8000920:	2310      	movs	r3, #16
 8000922:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000924:	2301      	movs	r3, #1
 8000926:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4879      	ldr	r0, [pc, #484]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000930:	f7ff fe68 	bl	8000604 <MCAL_GPIO_Init>
					break;
 8000934:	e00c      	b.n	8000950 <MCAL_SPI_GPIO_Set_Pins+0x5c>

				/* Output */
				case NSS_HW_MASTER_SS_OUTPUT_ENABLED:
					/* Hardware Master/NNS Output Alternate function push-pull */
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 8000936:	2310      	movs	r3, #16
 8000938:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800093a:	2306      	movs	r3, #6
 800093c:	73bb      	strb	r3, [r7, #14]
					SPI_GPIO_Config.GPIO_Speed = GPIO_SPEED_10M;
 800093e:	2301      	movs	r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	4872      	ldr	r0, [pc, #456]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 800094a:	f7ff fe5b 	bl	8000604 <MCAL_GPIO_Init>
					break;
 800094e:	bf00      	nop
			}

			/* PA5 : SPI1_SCK */
			/* Master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 8000950:	2320      	movs	r3, #32
 8000952:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000954:	2306      	movs	r3, #6
 8000956:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000958:	2301      	movs	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	486c      	ldr	r0, [pc, #432]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000964:	f7ff fe4e 	bl	8000604 <MCAL_GPIO_Init>

			/* PA6 : SPI1_MISO */
			/* Full duplex / master Input floating / Input pull-up */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800096c:	2301      	movs	r3, #1
 800096e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	4867      	ldr	r0, [pc, #412]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000978:	f7ff fe44 	bl	8000604 <MCAL_GPIO_Init>

			/* PA7 : SPI1_MOSI */
			/* Full duplex / master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000980:	2306      	movs	r3, #6
 8000982:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000984:	2301      	movs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	4861      	ldr	r0, [pc, #388]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000990:	f7ff fe38 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15;
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
		}
	}
}
 8000994:	e0b5      	b.n	8000b02 <MCAL_SPI_GPIO_Set_Pins+0x20e>
			if(G_SPI_Config[SPI1_INDEX]->NSS == NSS_HW_SLAVE)
 8000996:	4b5e      	ldr	r3, [pc, #376]	; (8000b10 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	899b      	ldrh	r3, [r3, #12]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d109      	bne.n	80009b4 <MCAL_SPI_GPIO_Set_Pins+0xc0>
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 80009a0:	2310      	movs	r3, #16
 80009a2:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4859      	ldr	r0, [pc, #356]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009b0:	f7ff fe28 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 80009b4:	2320      	movs	r3, #32
 80009b6:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80009b8:	2301      	movs	r3, #1
 80009ba:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	4854      	ldr	r0, [pc, #336]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009c4:	f7ff fe1e 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80009cc:	2306      	movs	r3, #6
 80009ce:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Speed = GPIO_SPEED_10M;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	484e      	ldr	r0, [pc, #312]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009dc:	f7ff fe12 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4849      	ldr	r0, [pc, #292]	; (8000b14 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009f0:	f7ff fe08 	bl	8000604 <MCAL_GPIO_Init>
}
 80009f4:	e085      	b.n	8000b02 <MCAL_SPI_GPIO_Set_Pins+0x20e>
	else if(SPIx == SPI2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a47      	ldr	r2, [pc, #284]	; (8000b18 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	f040 8081 	bne.w	8000b02 <MCAL_SPI_GPIO_Set_Pins+0x20e>
		if(G_SPI_Config[SPI2_INDEX]->SPI_Mode == SPI_MODE_MASTER) /* Master */
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d148      	bne.n	8000a9c <MCAL_SPI_GPIO_Set_Pins+0x1a8>
			switch (G_SPI_Config[SPI2_INDEX]->NSS)
 8000a0a:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	899b      	ldrh	r3, [r3, #12]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d00f      	beq.n	8000a34 <MCAL_SPI_GPIO_Set_Pins+0x140>
 8000a14:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d119      	bne.n	8000a50 <MCAL_SPI_GPIO_Set_Pins+0x15c>
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	483b      	ldr	r0, [pc, #236]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000a2e:	f7ff fde9 	bl	8000604 <MCAL_GPIO_Init>
					break;
 8000a32:	e00d      	b.n	8000a50 <MCAL_SPI_GPIO_Set_Pins+0x15c>
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	73bb      	strb	r3, [r7, #14]
					SPI_GPIO_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	4834      	ldr	r0, [pc, #208]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000a4a:	f7ff fddb 	bl	8000604 <MCAL_GPIO_Init>
					break;
 8000a4e:	bf00      	nop
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000a56:	2306      	movs	r3, #6
 8000a58:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	482d      	ldr	r0, [pc, #180]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000a66:	f7ff fdcd 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14;
 8000a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a6e:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4828      	ldr	r0, [pc, #160]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000a7c:	f7ff fdc2 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15;
 8000a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a84:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000a86:	2306      	movs	r3, #6
 8000a88:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4619      	mov	r1, r3
 8000a94:	4821      	ldr	r0, [pc, #132]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000a96:	f7ff fdb5 	bl	8000604 <MCAL_GPIO_Init>
}
 8000a9a:	e032      	b.n	8000b02 <MCAL_SPI_GPIO_Set_Pins+0x20e>
			if(G_SPI_Config[SPI2_INDEX]->NSS == NSS_HW_SLAVE)
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	899b      	ldrh	r3, [r3, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10a      	bne.n	8000abc <MCAL_SPI_GPIO_Set_Pins+0x1c8>
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000ab8:	f7ff fda4 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000ace:	f7ff fd99 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14;
 8000ad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad6:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000ae8:	f7ff fd8c 	bl	8000604 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15;
 8000aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af0:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000af2:	2301      	movs	r3, #1
 8000af4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000afe:	f7ff fd81 	bl	8000604 <MCAL_GPIO_Init>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40013000 	.word	0x40013000
 8000b10:	2000001c 	.word	0x2000001c
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40003800 	.word	0x40003800
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <MCAL_SPI_Recieve_Data>:
 * @param [in] 		- Polling_En : Enable Polling or Disable it
 * @retval 			- None
 * Note 			- None
 */
void MCAL_SPI_Recieve_Data(SPI_Typedef_t *SPIx, uint16_t *pRxBuffer, enum Polling_Mechanism Polling_En)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	71fb      	strb	r3, [r7, #7]
	if(Polling_En == SPI_enable)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d106      	bne.n	8000b42 <MCAL_SPI_Recieve_Data+0x22>
	{
		/* Wait for reception complete */
		while(! (SPIx->SR & SPI_SR_RXNE));
 8000b34:	bf00      	nop
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f9      	beq.n	8000b36 <MCAL_SPI_Recieve_Data+0x16>
	}

	/* Start reception, Write data to SPI data register */
	*(pRxBuffer) = SPIx->DR;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	801a      	strh	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
	...

08000b58 <SPI1_IRQHandler>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <SPI1_IRQHandler+0x54>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	793b      	ldrb	r3, [r7, #4]
 8000b6c:	f362 0300 	bfi	r3, r2, #0, #1
 8000b70:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <SPI1_IRQHandler+0x54>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	793b      	ldrb	r3, [r7, #4]
 8000b7e:	f362 0341 	bfi	r3, r2, #1, #1
 8000b82:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <SPI1_IRQHandler+0x54>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	091b      	lsrs	r3, r3, #4
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	793b      	ldrb	r3, [r7, #4]
 8000b92:	f362 0382 	bfi	r3, r2, #2, #1
 8000b96:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(IRQ);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SPI1_IRQHandler+0x58>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	7938      	ldrb	r0, [r7, #4]
 8000ba0:	4798      	blx	r3
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	2000001c 	.word	0x2000001c

08000bb4 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <SPI2_IRQHandler+0x54>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	085b      	lsrs	r3, r3, #1
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	793b      	ldrb	r3, [r7, #4]
 8000bc8:	f362 0300 	bfi	r3, r2, #0, #1
 8000bcc:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <SPI2_IRQHandler+0x54>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	793b      	ldrb	r3, [r7, #4]
 8000bda:	f362 0341 	bfi	r3, r2, #1, #1
 8000bde:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <SPI2_IRQHandler+0x54>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	091b      	lsrs	r3, r3, #4
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	793b      	ldrb	r3, [r7, #4]
 8000bee:	f362 0382 	bfi	r3, r2, #2, #1
 8000bf2:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(IRQ);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SPI2_IRQHandler+0x58>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	7938      	ldrb	r0, [r7, #4]
 8000bfc:	4798      	blx	r3
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40003800 	.word	0x40003800
 8000c0c:	2000001c 	.word	0x2000001c

08000c10 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_Typedef_t* USARTx, USART_Config_t* UART_Config)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a59      	ldr	r2, [pc, #356]	; (8000d84 <MCAL_UART_Init+0x174>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d109      	bne.n	8000c36 <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000c22:	4b59      	ldr	r3, [pc, #356]	; (8000d88 <MCAL_UART_Init+0x178>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a58      	ldr	r2, [pc, #352]	; (8000d88 <MCAL_UART_Init+0x178>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 8000c2e:	4a57      	ldr	r2, [pc, #348]	; (8000d8c <MCAL_UART_Init+0x17c>)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e01a      	b.n	8000c6c <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a55      	ldr	r2, [pc, #340]	; (8000d90 <MCAL_UART_Init+0x180>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d109      	bne.n	8000c52 <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLK_EN();
 8000c3e:	4b52      	ldr	r3, [pc, #328]	; (8000d88 <MCAL_UART_Init+0x178>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a51      	ldr	r2, [pc, #324]	; (8000d88 <MCAL_UART_Init+0x178>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 8000c4a:	4a50      	ldr	r2, [pc, #320]	; (8000d8c <MCAL_UART_Init+0x17c>)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6053      	str	r3, [r2, #4]
 8000c50:	e00c      	b.n	8000c6c <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a4f      	ldr	r2, [pc, #316]	; (8000d94 <MCAL_UART_Init+0x184>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d108      	bne.n	8000c6c <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLK_EN();
 8000c5a:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <MCAL_UART_Init+0x178>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <MCAL_UART_Init+0x178>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 8000c66:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <MCAL_UART_Init+0x17c>)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	8812      	ldrh	r2, [r2, #0]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	8912      	ldrh	r2, [r2, #8]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	8952      	ldrh	r2, [r2, #10]
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	8992      	ldrh	r2, [r2, #12]
 8000caa:	431a      	orrs	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	89d2      	ldrh	r2, [r2, #14]
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a30      	ldr	r2, [pc, #192]	; (8000d84 <MCAL_UART_Init+0x174>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d103      	bne.n	8000cce <MCAL_UART_Init+0xbe>

	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000cc6:	f7ff fd67 	bl	8000798 <MCAL_RCC_GetPCLK2Freq>
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	e002      	b.n	8000cd4 <MCAL_UART_Init+0xc4>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000cce:	f7ff fd4f 	bl	8000770 <MCAL_RCC_GetPCLK1Freq>
 8000cd2:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	0119      	lsls	r1, r3, #4
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	009a      	lsls	r2, r3, #2
 8000cec:	441a      	add	r2, r3
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	fb00 f303 	mul.w	r3, r0, r3
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	011b      	lsls	r3, r3, #4
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <MCAL_UART_Init+0x188>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	095b      	lsrs	r3, r3, #5
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	8a1b      	ldrh	r3, [r3, #16]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d026      	beq.n	8000d7a <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	8a12      	ldrh	r2, [r2, #16]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <MCAL_UART_Init+0x174>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d106      	bne.n	8000d50 <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_EN();
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MCAL_UART_Init+0x18c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <MCAL_UART_Init+0x18c>)
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_EN();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_EN();
	}
}
 8000d4e:	e014      	b.n	8000d7a <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <MCAL_UART_Init+0x180>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d106      	bne.n	8000d66 <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_EN();
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MCAL_UART_Init+0x18c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <MCAL_UART_Init+0x18c>)
 8000d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	e009      	b.n	8000d7a <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <MCAL_UART_Init+0x184>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d105      	bne.n	8000d7a <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_EN();
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MCAL_UART_Init+0x18c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <MCAL_UART_Init+0x18c>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d78:	6013      	str	r3, [r2, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40013800 	.word	0x40013800
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	20000024 	.word	0x20000024
 8000d90:	40004400 	.word	0x40004400
 8000d94:	40004800 	.word	0x40004800
 8000d98:	51eb851f 	.word	0x51eb851f
 8000d9c:	e000e104 	.word	0xe000e104

08000da0 <MCAL_UART_SendData>:
 * 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */
void MCAL_UART_SendData(USART_Typedef_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	4613      	mov	r3, r2
 8000dac:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if (PollingEn == USART_enable)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d106      	bne.n	8000dc2 <MCAL_UART_SendData+0x22>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & 1<<7));
 8000db4:	bf00      	nop
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f9      	beq.n	8000db6 <MCAL_UART_SendData+0x16>
	/* When Transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */
	if (USARTx == USART1)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4a2b      	ldr	r2, [pc, #172]	; (8000e74 <MCAL_UART_SendData+0xd4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d117      	bne.n	8000dfa <MCAL_UART_SendData+0x5a>
	{
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <MCAL_UART_SendData+0xd8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	891b      	ldrh	r3, [r3, #8]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <MCAL_UART_SendData+0x40>
		{
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	605a      	str	r2, [r3, #4]
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
		}
	}
}
 8000dde:	e043      	b.n	8000e68 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_9B)
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <MCAL_UART_SendData+0xd8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	891b      	ldrh	r3, [r3, #8]
 8000de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dea:	d13d      	bne.n	8000e68 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	605a      	str	r2, [r3, #4]
}
 8000df8:	e036      	b.n	8000e68 <MCAL_UART_SendData+0xc8>
	else if (USARTx == USART2)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <MCAL_UART_SendData+0xdc>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d117      	bne.n	8000e32 <MCAL_UART_SendData+0x92>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MCAL_UART_SendData+0xd8>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	891b      	ldrh	r3, [r3, #8]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <MCAL_UART_SendData+0x78>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	605a      	str	r2, [r3, #4]
}
 8000e16:	e027      	b.n	8000e68 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_9B)
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MCAL_UART_SendData+0xd8>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	891b      	ldrh	r3, [r3, #8]
 8000e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e22:	d121      	bne.n	8000e68 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	605a      	str	r2, [r3, #4]
}
 8000e30:	e01a      	b.n	8000e68 <MCAL_UART_SendData+0xc8>
	else if (USARTx == USART3)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <MCAL_UART_SendData+0xe0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d116      	bne.n	8000e68 <MCAL_UART_SendData+0xc8>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MCAL_UART_SendData+0xd8>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	891b      	ldrh	r3, [r3, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d105      	bne.n	8000e50 <MCAL_UART_SendData+0xb0>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	605a      	str	r2, [r3, #4]
}
 8000e4e:	e00b      	b.n	8000e68 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MCAL_UART_SendData+0xd8>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	891b      	ldrh	r3, [r3, #8]
 8000e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e5a:	d105      	bne.n	8000e68 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	605a      	str	r2, [r3, #4]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40013800 	.word	0x40013800
 8000e78:	20000024 	.word	0x20000024
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	40004800 	.word	0x40004800

08000e84 <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_Typedef_t* USARTx)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Pin_Config;

	if (USARTx == USART1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a73      	ldr	r2, [pc, #460]	; (800105c <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d149      	bne.n	8000f28 <MCAL_UART_GPIO_Set_Pins+0xa4>
	{
		// PA9 Tx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_9;
 8000e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e98:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	486d      	ldr	r0, [pc, #436]	; (8001060 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000eaa:	f7ff fbab 	bl	8000604 <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4868      	ldr	r0, [pc, #416]	; (8001060 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000ec0:	f7ff fba0 	bl	8000604 <MCAL_GPIO_Init>

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000ec4:	4b67      	ldr	r3, [pc, #412]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	89db      	ldrh	r3, [r3, #14]
 8000eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ece:	d005      	beq.n	8000edc <MCAL_UART_GPIO_Set_Pins+0x58>
 8000ed0:	4b64      	ldr	r3, [pc, #400]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	89db      	ldrh	r3, [r3, #14]
 8000ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000eda:	d10a      	bne.n	8000ef2 <MCAL_UART_GPIO_Set_Pins+0x6e>
		{
			// PA11 CTS
			Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
 8000edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee0:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4619      	mov	r1, r3
 8000eec:	485c      	ldr	r0, [pc, #368]	; (8001060 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000eee:	f7ff fb89 	bl	8000604 <MCAL_GPIO_Init>
		}

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	89db      	ldrh	r3, [r3, #14]
 8000ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000efc:	d006      	beq.n	8000f0c <MCAL_UART_GPIO_Set_Pins+0x88>
 8000efe:	4b59      	ldr	r3, [pc, #356]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	89db      	ldrh	r3, [r3, #14]
 8000f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f08:	f040 80a3 	bne.w	8001052 <MCAL_UART_GPIO_Set_Pins+0x1ce>
		{
			// PA12 RTS
			Pin_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000f12:	2306      	movs	r3, #6
 8000f14:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	484f      	ldr	r0, [pc, #316]	; (8001060 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000f22:	f7ff fb6f 	bl	8000604 <MCAL_GPIO_Init>
			Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
		}
	}
}
 8000f26:	e094      	b.n	8001052 <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d144      	bne.n	8000fba <MCAL_UART_GPIO_Set_Pins+0x136>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_2;
 8000f30:	2304      	movs	r3, #4
 8000f32:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000f34:	2306      	movs	r3, #6
 8000f36:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	4847      	ldr	r0, [pc, #284]	; (8001060 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000f44:	f7ff fb5e 	bl	8000604 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_3;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	4842      	ldr	r0, [pc, #264]	; (8001060 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000f58:	f7ff fb54 	bl	8000604 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000f5c:	4b41      	ldr	r3, [pc, #260]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	89db      	ldrh	r3, [r3, #14]
 8000f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f66:	d005      	beq.n	8000f74 <MCAL_UART_GPIO_Set_Pins+0xf0>
 8000f68:	4b3e      	ldr	r3, [pc, #248]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	89db      	ldrh	r3, [r3, #14]
 8000f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f72:	d109      	bne.n	8000f88 <MCAL_UART_GPIO_Set_Pins+0x104>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_0;
 8000f74:	2301      	movs	r3, #1
 8000f76:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	4837      	ldr	r0, [pc, #220]	; (8001060 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000f84:	f7ff fb3e 	bl	8000604 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000f88:	4b36      	ldr	r3, [pc, #216]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	89db      	ldrh	r3, [r3, #14]
 8000f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f92:	d005      	beq.n	8000fa0 <MCAL_UART_GPIO_Set_Pins+0x11c>
 8000f94:	4b33      	ldr	r3, [pc, #204]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	89db      	ldrh	r3, [r3, #14]
 8000f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f9e:	d158      	bne.n	8001052 <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_1;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	482b      	ldr	r0, [pc, #172]	; (8001060 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000fb4:	f7ff fb26 	bl	8000604 <MCAL_GPIO_Init>
}
 8000fb8:	e04b      	b.n	8001052 <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART3)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a2b      	ldr	r2, [pc, #172]	; (800106c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d147      	bne.n	8001052 <MCAL_UART_GPIO_Set_Pins+0x1ce>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4826      	ldr	r0, [pc, #152]	; (8001070 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8000fd8:	f7ff fb14 	bl	8000604 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
 8000fdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fe0:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	4619      	mov	r1, r3
 8000fec:	4820      	ldr	r0, [pc, #128]	; (8001070 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8000fee:	f7ff fb09 	bl	8000604 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	89db      	ldrh	r3, [r3, #14]
 8000ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ffc:	d005      	beq.n	800100a <MCAL_UART_GPIO_Set_Pins+0x186>
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	89db      	ldrh	r3, [r3, #14]
 8001004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001008:	d10a      	bne.n	8001020 <MCAL_UART_GPIO_Set_Pins+0x19c>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_13;
 800100a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100e:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8001010:	2301      	movs	r3, #1
 8001012:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 800101c:	f7ff faf2 	bl	8000604 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	89db      	ldrh	r3, [r3, #14]
 8001026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800102a:	d005      	beq.n	8001038 <MCAL_UART_GPIO_Set_Pins+0x1b4>
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	89db      	ldrh	r3, [r3, #14]
 8001032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001036:	d10c      	bne.n	8001052 <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_14;
 8001038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800103c:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800103e:	2306      	movs	r3, #6
 8001040:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_Speed = GPIO_SPEED_10M;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4619      	mov	r1, r3
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 800104e:	f7ff fad9 	bl	8000604 <MCAL_GPIO_Init>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40013800 	.word	0x40013800
 8001060:	40010800 	.word	0x40010800
 8001064:	20000024 	.word	0x20000024
 8001068:	40004400 	.word	0x40004400
 800106c:	40004800 	.word	0x40004800
 8001070:	40010c00 	.word	0x40010c00

08001074 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <USART1_IRQHandler+0x10>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4798      	blx	r3
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000024 	.word	0x20000024

08001088 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <USART2_IRQHandler+0x10>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	4798      	blx	r3
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000024 	.word	0x20000024

0800109c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <USART3_IRQHandler+0x10>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4798      	blx	r3
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000024 	.word	0x20000024

080010b0 <main>:
/* ======================================= */

#include "08_SPI_Send_Data_Through_Terminal_Between_2_MCUs.h"
/* =========== Main Program ========== */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	SPI_Send_Data_Through_Terminal_Between_2_MCUs();
 80010b4:	f7ff f85c 	bl	8000170 <SPI_Send_Data_Through_Terminal_Between_2_MCUs>
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	; (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	; (800110c <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ee:	f000 f811 	bl	8001114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff ffdd 	bl	80010b0 <main>

080010f6 <LoopForever>:

LoopForever:
    b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   r0, =_estack
 80010f8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001104:	08001194 	.word	0x08001194
  ldr r2, =_sbss
 8001108:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800110c:	20000070 	.word	0x20000070

08001110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_2_IRQHandler>
	...

08001114 <__libc_init_array>:
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	2600      	movs	r6, #0
 8001118:	4d0c      	ldr	r5, [pc, #48]	; (800114c <__libc_init_array+0x38>)
 800111a:	4c0d      	ldr	r4, [pc, #52]	; (8001150 <__libc_init_array+0x3c>)
 800111c:	1b64      	subs	r4, r4, r5
 800111e:	10a4      	asrs	r4, r4, #2
 8001120:	42a6      	cmp	r6, r4
 8001122:	d109      	bne.n	8001138 <__libc_init_array+0x24>
 8001124:	f000 f81a 	bl	800115c <_init>
 8001128:	2600      	movs	r6, #0
 800112a:	4d0a      	ldr	r5, [pc, #40]	; (8001154 <__libc_init_array+0x40>)
 800112c:	4c0a      	ldr	r4, [pc, #40]	; (8001158 <__libc_init_array+0x44>)
 800112e:	1b64      	subs	r4, r4, r5
 8001130:	10a4      	asrs	r4, r4, #2
 8001132:	42a6      	cmp	r6, r4
 8001134:	d105      	bne.n	8001142 <__libc_init_array+0x2e>
 8001136:	bd70      	pop	{r4, r5, r6, pc}
 8001138:	f855 3b04 	ldr.w	r3, [r5], #4
 800113c:	4798      	blx	r3
 800113e:	3601      	adds	r6, #1
 8001140:	e7ee      	b.n	8001120 <__libc_init_array+0xc>
 8001142:	f855 3b04 	ldr.w	r3, [r5], #4
 8001146:	4798      	blx	r3
 8001148:	3601      	adds	r6, #1
 800114a:	e7f2      	b.n	8001132 <__libc_init_array+0x1e>
 800114c:	0800118c 	.word	0x0800118c
 8001150:	0800118c 	.word	0x0800118c
 8001154:	0800118c 	.word	0x0800118c
 8001158:	08001190 	.word	0x08001190

0800115c <_init>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	bf00      	nop
 8001160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001162:	bc08      	pop	{r3}
 8001164:	469e      	mov	lr, r3
 8001166:	4770      	bx	lr

08001168 <_fini>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	bf00      	nop
 800116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116e:	bc08      	pop	{r3}
 8001170:	469e      	mov	lr, r3
 8001172:	4770      	bx	lr
